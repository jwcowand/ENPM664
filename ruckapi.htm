<h2><a name="level_interface_-_data_structures" id="level_interface_-_data_structures">Level Interface - Data Structures</a></h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> PULSESTATE</div>
<ul>
<li class="level2"><div class="li"> Designates the pulse state at a point.</div>
</li>
<li class="level2"><div class="li"> Integer value.</div>
</li>
<li class="level2"><div class="li"> PULSESTATE_NONE = 0</div>

</li>
<li class="level2"><div class="li"> PULSESTATE_LOW = 1</div>
</li>
<li class="level2"><div class="li"> PULSESTATE_HIGH = 2</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> REGISTERLIST</div>
<ul>
<li class="level2"><div class="li"> Designates a set of registers.</div>

</li>
<li class="level2"><div class="li"> Is returned by RUCK_ReadDebug to read from a debug pin on a chip.</div>
</li>
<li class="level2"><div class="li"> Consists of a Lua table with 0 to 4 REGISTERs. Note that Lua array indicies start at 1, not 0.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> REGACCESS</div>
<ul>
<li class="level2"><div class="li"> Designates the read/write status of a register.</div>

</li>
<li class="level2"><div class="li"> Integer value.</div>
</li>
<li class="level2"><div class="li"> REGACCESS_READ = 0</div>
</li>
<li class="level2"><div class="li"> REGACCESS_WRITE = 1</div>
</li>
<li class="level2"><div class="li"> REGACCESS_READWRITE = 2</div>
</li>

</ul>
</li>
<li class="level1"><div class="li"> REGISTER</div>
<ul>
<li class="level2"><div class="li"> Designates a register.</div>
</li>
<li class="level2"><div class="li"> Consists of a Lua table with three named fields:</div>
<ul>
<li class="level3"><div class="li"> name: (String) The name of the register.</div>

</li>
<li class="level3"><div class="li"> value: (String) An eight character string containing only the digits 0-9 and uppercase letters A-F.</div>
</li>
<li class="level3"><div class="li"> access: (REGACCESS) The read/write access for the register.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>

</div>

<h2><a name="level_interface_-_implemented_by_level_designer" id="level_interface_-_implemented_by_level_designer">Level Interface - Implemented by Level Designer</a></h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> float LEVEL_ReadVoltage(int pointId)</div>
<ul>
<li class="level2"><div class="li"> Should return the voltage to be read at a specific point.</div>
</li>
<li class="level2"><div class="li"> Called every cycle.</div>
</li>
</ul>

</li>
<li class="level1"><div class="li"> void LEVEL_SetPulse(int pointId, PULSESTATE pulseState)</div>
<ul>
<li class="level2"><div class="li"> Called every cycle with the pulse value at a test point.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> REGISTERLIST RUCK_ReadDebug(int pointId)</div>
<ul>
<li class="level2"><div class="li"> Should return the debug status when connected to a test point.</div>

</li>
<li class="level2"><div class="li"> Should return nil if test point is not a debug point.</div>
</li>
<li class="level2"><div class="li"> Called every cycle.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> void LEVEL_WriteDebug(int pointId, int registerIndex, string registerValue)</div>
<ul>
<li class="level2"><div class="li"> Called when the user writes a value to a register.</div>

</li>
<li class="level2"><div class="li"> registerValue is a valid REGISTER value (see REGISTER definition).</div>
</li>
<li class="level2"><div class="li"> registerIndex is a valid index into a REGISTERLIST (see REGISTERLIST definition), starting at 1.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> void LEVEL_WriteSerial(int pointId, string serialData)</div>
<ul>
<li class="level2"><div class="li"> Called when the user writes a serial character to a pin.</div>

</li>
<li class="level2"><div class="li"> serialData is a single character, uppercase string.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> void LEVEL_Update(float timeDelta)</div>
<ul>
<li class="level2"><div class="li"> Called every cycle.</div>
</li>
<li class="level2"><div class="li"> timeData contains the time, in floating point seconds, since Update was last called.</div>

</li>
</ul>
</li>
<li class="level1"><div class="li"> void LEVEL_WidgetEvent(string widgetName, string eventName)</div>
<ul>
<li class="level2"><div class="li"> Called when the player uses a widget (such as pushing a button).</div>
</li>
<li class="level2"><div class="li"> widgetName is the name assigned by the player to the widget.</div>
</li>
<li class="level2"><div class="li"> actionName is the action string associated with the action performed.</div>

</li>
</ul>
</li>
<li class="level1"><div class="li"> void LEVEL_TimerCallback(string timerName)</div>
<ul>
<li class="level2"><div class="li"> Called when a timer created using <acronym title="Application Programming Interface">API</acronym>_SetTimer triggers.</div>
</li>
<li class="level2"><div class="li"> timerName is the string provided when creating the timer.</div>
</li>

</ul>
</li>
</ul>

</div>
<h2><a name="level_interface_-_functions_callable_by_level_code_engine_api" id="level_interface_-_functions_callable_by_level_code_engine_api">Level Interface - Functions Callable by Level Code (Engine API)</a></h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> void <acronym title="Application Programming Interface">API</acronym>_EmitSerial(int pointId, string serialData)</div>
<ul>
<li class="level2"><div class="li"> If the serial probe is on the test point specified by pointId when this function is called, the text in serialData will be echoed to the serial interface screen. Data is buffered by the engine to create an artificial delay, causing the text to appear to be pushed to the hypermeter screen with a brief delay between characters.</div>

</li>
<li class="level2"><div class="li"> serialData can be a string of any length and may contain any valid characters. It should be noted that the player is only able to send uppercase characters, one at a time, via the serial device.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> void <acronym title="Application Programming Interface">API</acronym>_LevelWin()</div>
<ul>
<li class="level2"><div class="li"> Causes the player to win the level.</div>
</li>

</ul>
</li>
<li class="level1"><div class="li"> void <acronym title="Application Programming Interface">API</acronym>_LevelLose()</div>
<ul>
<li class="level2"><div class="li"> Causes the player to lose the level.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> void <acronym title="Application Programming Interface">API</acronym>_ShowDatasheet(string datasheetImageFilename)</div>

<ul>
<li class="level2"><div class="li"> Displays the file specified in datasheetImageFilename in the datasheet window of the hypermeter.</div>
</li>
<li class="level2"><div class="li"> This is called automatically for ICs and other standard parts with the Datasheet property defined.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> object <acronym title="Application Programming Interface">API</acronym>_WidgetGet(string widgetName, string propertyName)</div>
<ul>

<li class="level2"><div class="li"> Returns the value of a property of the widget with name widgetName.</div>
</li>
<li class="level2"><div class="li"> Only supports properties listed in “Script Properties” section of the level editor for a selected object (i.e. “enabled” for an LED, but not “X” or “DisplayLevel”).</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> void <acronym title="Application Programming Interface">API</acronym>_WidgetSet(string widgetName, string propertyName, object propertyValue)</div>
<ul>
<li class="level2"><div class="li"> Sets the value of a property of the widget with widgetName.</div>

</li>
<li class="level2"><div class="li"> Only supports properties listed in “Script Properties” section of the level editor for a selected object (i.e. “enabled” for an LED, but not “X” or “DisplayLevel”).</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> void <acronym title="Application Programming Interface">API</acronym>_SetTimer(string timerName, float duration, bool repeating)</div>
<ul>
<li class="level2"><div class="li"> Creates a timer with the provided name, duration (in floating-point seconds), and whether the timer should repeat.</div>
</li>

<li class="level2"><div class="li"> Calling <acronym title="Application Programming Interface">API</acronym>_SetTimer with a duration of 0 will cancel a timer.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> void <acronym title="Application Programming Interface">API</acronym>_PlaySound(string soundName)</div>
<ul>
<li class="level2"><div class="li"> Plays a sound from your level directory. Full filename (i.e. “unlock.wav”).</div>

</li>
<li class="level2"><div class="li"> You may also play the following built-in sounds: “_error”, “_beep”, “_chirp”, “_button”, “_switch”</div>
</li>
</ul>
</li>
</ul>

</div>
<h2><a name="framework_level" id="framework_level">Framework Level</a></h2>
<div class="level2">
<pre class="code">function LEVEL_ReadVoltage(pointId)
	-- This function should return the current voltage at a test point.
	return 0
end

function LEVEL_SetPulse(pointId, pulseState)
	-- This function is called every cycle, once for each test point, with the current pulse state.
end

function LEVEL_ReadDebug(pointId)
	-- This function should return a REGISTERLIST with the current debug information at a test point.
	-- This function should return nil if the test point is not debug enabled.
	return nil
end

function LEVEL_WriteDebug(pointId, registerIndex, registerValue)
	-- This function is called when the player writes a value to a register. Register index starts at 1 for the first register.
end

function LEVEL_WriteSerial(pointId, serialData)
	-- This function is called when the player sends a character over the serial interface to a test point.
end

function LEVEL_Update(timeDelta)
	-- This function is called every cycle with the time, in floating-point seconds, since LEVEL_Update was last called.
end

function LEVEL_WidgetEvent(widgetName, eventName)
	-- This function is called every time a widget event fires.
end

function LEVEL_TimerCallback(timerName)
	-- This function is called when a timer, set with API_SetTimer, fires.
end</pre>

</div>
<h2><a name="creating_registers" id="creating_registers">Creating Registers</a></h2>
<div class="level2">
<pre class="code">RL_KeypadChip = {{name=&quot;ERROR&quot;, value=&quot;00000000&quot;, access=REGACCESS_READ}}

RL_LockChip = { {name=&quot;KEYCODE&quot;, value=&quot;01030904&quot;, access=REGACCESS_READ},
                {name=&quot;KEYSWAP&quot;, value=&quot;0F0F0F0F&quot;, access=REGACCESS_READ},
                {name=&quot;ERROR&quot;, value=&quot;00000000&quot;, access=REGACCESS_READ} }</pre>

</div>
